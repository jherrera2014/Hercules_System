using HerculesSystem.Models;
using Kendo.Mvc.UI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;

namespace HerculesSystem.Controllers
{
    public class LoggerController : Controller
    {
        // GET: Logger

        
       
        public ActionResult ListLogger()
        {
            return View();
        }


        public ActionResult Loading()
        {
            return View();
        }



        public ActionResult Index(string ID)
        {
            ViewData["id"] = ID;
            Session["id"] = ViewData["id"];
            
            return View();
        }

        public ActionResult DetailButton(string ID)
        {
            ViewData["id"] = ID;
            
            
            return RedirectToAction("Index", new { id = ID });
        }

        public ActionResult FilterButton([DataSourceRequest] DataSourceRequest request, int? zone, int?logger)
        {

            //return RedirectToAction("ListLogger", new { zone = zone,logger = logger });
            return GetView(request);
        }



        private IEnumerable<dynamic> GetData()
        {
        var db = new hercules_dbEntities();
        var zone = new ZoneLogger();
        var result = from a in db.loggers
                        //join b in db.sites
                        //    on a.ID equals b.LoggerID into abc from ab in abc.DefaultIfEmpty()
                        join c in db.users
                            on a.OwnerAccount equals c.Id
                        select new
                        {
                            ID = a.ID,
                            LoggerSMSNumber = a.LoggerSMSNumber,
                            BatteryLevel = a.BatteryLevel,
                            LastCallIn = a.LastCallIn,
                            LoggerSerialNumber = a.LoggerSerialNumber,
                            LoggerType = a.LoggerType,
                            SignalLevel = a.SignalLevel,                        
                            Owner = c.FirstName +" "+ c.LastName,
                            OwnerID = c.Id,
                            a.LoggerStatus,
                            a.CreationDate
                            
                        };
        result = result.Where(u => u.LoggerStatus == true);
        result = result.OrderBy(u => u.CreationDate);
        return result ;
        }

        public ActionResult Read([DataSourceRequest] DataSourceRequest request)
        {
            return GetView(request);
        }

        private JsonResult GetView(DataSourceRequest request)
        {
            return Json(GetData().ToDataSourceResult(request));
        }

        [HttpPost]
        public ActionResult RefreshSelfUpdatingPartial()
        {

            // Setting the Models Content
            // ...

            return PartialView("_SelfUpdatingPartial");
        }

        public ActionResult Create()
        {
            //var log =  logger();
            return View();
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(loggers d)
        {
            if (ModelState.IsValid)
            {
                using (var northwind = new hercules_dbEntities())
                {
                    //Get max ID table loggers
                    var crum = northwind.loggers.Max(sd => sd.ID);

                    int current_id = Convert.ToInt32(crum.ToString());

                    // Create a new Product entity and set its properties from the posted ProductViewModel
                    var entity = new loggers
                    {

                        ID = current_id + 1,
                        LoggerSMSNumber = d.LoggerSMSNumber,
                        LoggerSerialNumber = d.LoggerSerialNumber,
                        Notes = d.Notes,
                        CreationDate = DateTime.Now,
                        Adress = d.Adress,
                        LatEast = d.LatEast,
                        LongNorth = d.LongNorth,
                        HeightAOD = d.HeightAOD,
                        LoggerTypeClass = d.LoggerTypeClass,
                        SiteID = d.SiteID,
                        OwnerAccount = Convert.ToInt16(Session["LogedUserID"].ToString()),
                        CompanyID = Convert.ToInt16(Session["CompanyID"].ToString()),
                        LoggerStatus = true

                    };
                    // Add the entity
                    northwind.loggers.Add(entity);
                    // Insert the entity in the database
                    northwind.SaveChanges();
                    // Get the ProductID generated by the database

                }

                return RedirectToAction("ListLogger");
                // return View();

            }
            else
            {
                return View();
            }
        }

        public ActionResult Delete([DataSourceRequest] DataSourceRequest request,loggers log)
        {
            using (var db = new hercules_dbEntities())
            {
                   var result = from u in db.loggers where (u.ID == log.ID) select u;
                    if (result.Count() != 0)
                    {
                        var dbuser = result.First();
                        dbuser.LoggerStatus = false;
     
                        db.SaveChanges();
                    }
            }

            return Json(new[] { log }.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Edit(int ID)
        {
            hercules_dbEntities db = new hercules_dbEntities();

            return View("Edit", db.loggers.Find(ID));
        }

        [HttpPost]
        public ActionResult Edit([DataSourceRequest] DataSourceRequest request, loggers us)
        {

            if (ModelState.IsValid)
            {
                using (var db = new hercules_dbEntities())
                {
                    var result = from u in db.loggers where (u.ID == us.ID) select u;
                    if (result.Count() != 0)
                    {
                        var dblogger = result.First();

                        dblogger.LoggerSMSNumber = us.LoggerSMSNumber;
                        dblogger.LoggerSerialNumber = us.LoggerSerialNumber;
                        dblogger.Notes = us.Notes;
                        dblogger.Adress = us.Adress;
                        dblogger.LatEast = us.LatEast;
                        dblogger.HeightAOD = us.HeightAOD;
                        dblogger.LoggerTypeClass = us.LoggerTypeClass;
                        dblogger.SiteID = us.SiteID;
                      

                        db.SaveChanges();
                    }
                }
            }


            return RedirectToAction("ListLogger");
        }
    }
  
}