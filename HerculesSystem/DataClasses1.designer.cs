#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.18444
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HerculesSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="hercules_db")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void Insertloggers(loggers instance);
    partial void Updateloggers(loggers instance);
    partial void Deleteloggers(loggers instance);
    partial void Insertsites(sites instance);
    partial void Updatesites(sites instance);
    partial void Deletesites(sites instance);
    partial void Insertzone(zone instance);
    partial void Updatezone(zone instance);
    partial void Deletezone(zone instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["hercules_dbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<loggers> loggers
		{
			get
			{
				return this.GetTable<loggers>();
			}
		}
		
		public System.Data.Linq.Table<sites> sites
		{
			get
			{
				return this.GetTable<sites>();
			}
		}
		
		public System.Data.Linq.Table<zone> zone
		{
			get
			{
				return this.GetTable<zone>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.loggers")]
	public partial class loggers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _LoggerType;
		
		private string _LoggerSoftware;
		
		private string _LoggerSerialNumber;
		
		private string _LoggerSMSNumber;
		
		private string _LoggerGSMNumber;
		
		private System.Nullable<int> _OwnerAccount;
		
		private System.Nullable<System.DateTime> _LastCallIn;
		
		private System.Nullable<System.DateTime> _RST;
		
		private System.Nullable<int> _SignalLevel;
		
		private System.Nullable<double> _BatteryLevel;
		
		private System.Nullable<int> _LogRateMs;
		
		private System.Nullable<int> _NetID;
		
		private System.Nullable<int> _LAC;
		
		private System.Nullable<int> _CellID;
		
		private System.Nullable<double> _MastLongitude;
		
		private System.Nullable<double> _MastLatitude;
		
		private System.Nullable<long> _DataCount;
		
		private string _Notes;
		
		private string _LastMessageType;
		
		private System.Nullable<int> _CallFrequency;
		
		private int _CompanyID;
		
		private EntitySet<sites> _sites;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLoggerTypeChanging(string value);
    partial void OnLoggerTypeChanged();
    partial void OnLoggerSoftwareChanging(string value);
    partial void OnLoggerSoftwareChanged();
    partial void OnLoggerSerialNumberChanging(string value);
    partial void OnLoggerSerialNumberChanged();
    partial void OnLoggerSMSNumberChanging(string value);
    partial void OnLoggerSMSNumberChanged();
    partial void OnLoggerGSMNumberChanging(string value);
    partial void OnLoggerGSMNumberChanged();
    partial void OnOwnerAccountChanging(System.Nullable<int> value);
    partial void OnOwnerAccountChanged();
    partial void OnLastCallInChanging(System.Nullable<System.DateTime> value);
    partial void OnLastCallInChanged();
    partial void OnRSTChanging(System.Nullable<System.DateTime> value);
    partial void OnRSTChanged();
    partial void OnSignalLevelChanging(System.Nullable<int> value);
    partial void OnSignalLevelChanged();
    partial void OnBatteryLevelChanging(System.Nullable<double> value);
    partial void OnBatteryLevelChanged();
    partial void OnLogRateMsChanging(System.Nullable<int> value);
    partial void OnLogRateMsChanged();
    partial void OnNetIDChanging(System.Nullable<int> value);
    partial void OnNetIDChanged();
    partial void OnLACChanging(System.Nullable<int> value);
    partial void OnLACChanged();
    partial void OnCellIDChanging(System.Nullable<int> value);
    partial void OnCellIDChanged();
    partial void OnMastLongitudeChanging(System.Nullable<double> value);
    partial void OnMastLongitudeChanged();
    partial void OnMastLatitudeChanging(System.Nullable<double> value);
    partial void OnMastLatitudeChanged();
    partial void OnDataCountChanging(System.Nullable<long> value);
    partial void OnDataCountChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnLastMessageTypeChanging(string value);
    partial void OnLastMessageTypeChanged();
    partial void OnCallFrequencyChanging(System.Nullable<int> value);
    partial void OnCallFrequencyChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public loggers()
		{
			this._sites = new EntitySet<sites>(new Action<sites>(this.attach_sites), new Action<sites>(this.detach_sites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggerType", DbType="VarChar(50)")]
		public string LoggerType
		{
			get
			{
				return this._LoggerType;
			}
			set
			{
				if ((this._LoggerType != value))
				{
					this.OnLoggerTypeChanging(value);
					this.SendPropertyChanging();
					this._LoggerType = value;
					this.SendPropertyChanged("LoggerType");
					this.OnLoggerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggerSoftware", DbType="VarChar(10)")]
		public string LoggerSoftware
		{
			get
			{
				return this._LoggerSoftware;
			}
			set
			{
				if ((this._LoggerSoftware != value))
				{
					this.OnLoggerSoftwareChanging(value);
					this.SendPropertyChanging();
					this._LoggerSoftware = value;
					this.SendPropertyChanged("LoggerSoftware");
					this.OnLoggerSoftwareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggerSerialNumber", DbType="VarChar(10)")]
		public string LoggerSerialNumber
		{
			get
			{
				return this._LoggerSerialNumber;
			}
			set
			{
				if ((this._LoggerSerialNumber != value))
				{
					this.OnLoggerSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._LoggerSerialNumber = value;
					this.SendPropertyChanged("LoggerSerialNumber");
					this.OnLoggerSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggerSMSNumber", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LoggerSMSNumber
		{
			get
			{
				return this._LoggerSMSNumber;
			}
			set
			{
				if ((this._LoggerSMSNumber != value))
				{
					this.OnLoggerSMSNumberChanging(value);
					this.SendPropertyChanging();
					this._LoggerSMSNumber = value;
					this.SendPropertyChanged("LoggerSMSNumber");
					this.OnLoggerSMSNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggerGSMNumber", DbType="VarChar(20)")]
		public string LoggerGSMNumber
		{
			get
			{
				return this._LoggerGSMNumber;
			}
			set
			{
				if ((this._LoggerGSMNumber != value))
				{
					this.OnLoggerGSMNumberChanging(value);
					this.SendPropertyChanging();
					this._LoggerGSMNumber = value;
					this.SendPropertyChanged("LoggerGSMNumber");
					this.OnLoggerGSMNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerAccount", DbType="Int")]
		public System.Nullable<int> OwnerAccount
		{
			get
			{
				return this._OwnerAccount;
			}
			set
			{
				if ((this._OwnerAccount != value))
				{
					this.OnOwnerAccountChanging(value);
					this.SendPropertyChanging();
					this._OwnerAccount = value;
					this.SendPropertyChanged("OwnerAccount");
					this.OnOwnerAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCallIn", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastCallIn
		{
			get
			{
				return this._LastCallIn;
			}
			set
			{
				if ((this._LastCallIn != value))
				{
					this.OnLastCallInChanging(value);
					this.SendPropertyChanging();
					this._LastCallIn = value;
					this.SendPropertyChanged("LastCallIn");
					this.OnLastCallInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RST", DbType="DateTime")]
		public System.Nullable<System.DateTime> RST
		{
			get
			{
				return this._RST;
			}
			set
			{
				if ((this._RST != value))
				{
					this.OnRSTChanging(value);
					this.SendPropertyChanging();
					this._RST = value;
					this.SendPropertyChanged("RST");
					this.OnRSTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignalLevel", DbType="Int")]
		public System.Nullable<int> SignalLevel
		{
			get
			{
				return this._SignalLevel;
			}
			set
			{
				if ((this._SignalLevel != value))
				{
					this.OnSignalLevelChanging(value);
					this.SendPropertyChanging();
					this._SignalLevel = value;
					this.SendPropertyChanged("SignalLevel");
					this.OnSignalLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatteryLevel", DbType="Float")]
		public System.Nullable<double> BatteryLevel
		{
			get
			{
				return this._BatteryLevel;
			}
			set
			{
				if ((this._BatteryLevel != value))
				{
					this.OnBatteryLevelChanging(value);
					this.SendPropertyChanging();
					this._BatteryLevel = value;
					this.SendPropertyChanged("BatteryLevel");
					this.OnBatteryLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogRateMs", DbType="Int")]
		public System.Nullable<int> LogRateMs
		{
			get
			{
				return this._LogRateMs;
			}
			set
			{
				if ((this._LogRateMs != value))
				{
					this.OnLogRateMsChanging(value);
					this.SendPropertyChanging();
					this._LogRateMs = value;
					this.SendPropertyChanged("LogRateMs");
					this.OnLogRateMsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetID", DbType="Int")]
		public System.Nullable<int> NetID
		{
			get
			{
				return this._NetID;
			}
			set
			{
				if ((this._NetID != value))
				{
					this.OnNetIDChanging(value);
					this.SendPropertyChanging();
					this._NetID = value;
					this.SendPropertyChanged("NetID");
					this.OnNetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LAC", DbType="Int")]
		public System.Nullable<int> LAC
		{
			get
			{
				return this._LAC;
			}
			set
			{
				if ((this._LAC != value))
				{
					this.OnLACChanging(value);
					this.SendPropertyChanging();
					this._LAC = value;
					this.SendPropertyChanged("LAC");
					this.OnLACChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellID", DbType="Int")]
		public System.Nullable<int> CellID
		{
			get
			{
				return this._CellID;
			}
			set
			{
				if ((this._CellID != value))
				{
					this.OnCellIDChanging(value);
					this.SendPropertyChanging();
					this._CellID = value;
					this.SendPropertyChanged("CellID");
					this.OnCellIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MastLongitude", DbType="Float")]
		public System.Nullable<double> MastLongitude
		{
			get
			{
				return this._MastLongitude;
			}
			set
			{
				if ((this._MastLongitude != value))
				{
					this.OnMastLongitudeChanging(value);
					this.SendPropertyChanging();
					this._MastLongitude = value;
					this.SendPropertyChanged("MastLongitude");
					this.OnMastLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MastLatitude", DbType="Float")]
		public System.Nullable<double> MastLatitude
		{
			get
			{
				return this._MastLatitude;
			}
			set
			{
				if ((this._MastLatitude != value))
				{
					this.OnMastLatitudeChanging(value);
					this.SendPropertyChanging();
					this._MastLatitude = value;
					this.SendPropertyChanged("MastLatitude");
					this.OnMastLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataCount", DbType="BigInt")]
		public System.Nullable<long> DataCount
		{
			get
			{
				return this._DataCount;
			}
			set
			{
				if ((this._DataCount != value))
				{
					this.OnDataCountChanging(value);
					this.SendPropertyChanging();
					this._DataCount = value;
					this.SendPropertyChanged("DataCount");
					this.OnDataCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(1024)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastMessageType", DbType="VarChar(10)")]
		public string LastMessageType
		{
			get
			{
				return this._LastMessageType;
			}
			set
			{
				if ((this._LastMessageType != value))
				{
					this.OnLastMessageTypeChanging(value);
					this.SendPropertyChanging();
					this._LastMessageType = value;
					this.SendPropertyChanged("LastMessageType");
					this.OnLastMessageTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CallFrequency", DbType="Int")]
		public System.Nullable<int> CallFrequency
		{
			get
			{
				return this._CallFrequency;
			}
			set
			{
				if ((this._CallFrequency != value))
				{
					this.OnCallFrequencyChanging(value);
					this.SendPropertyChanging();
					this._CallFrequency = value;
					this.SendPropertyChanged("CallFrequency");
					this.OnCallFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="loggers_sites", Storage="_sites", ThisKey="ID", OtherKey="LoggerID")]
		public EntitySet<sites> sites
		{
			get
			{
				return this._sites;
			}
			set
			{
				this._sites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sites(sites entity)
		{
			this.SendPropertyChanging();
			entity.loggers = this;
		}
		
		private void detach_sites(sites entity)
		{
			this.SendPropertyChanging();
			entity.loggers = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sites")]
	public partial class sites : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _DatagateID;
		
		private System.Nullable<int> _OwnerAccount;
		
		private string _SiteID;
		
		private string _Address;
		
		private string _LatEast;
		
		private string _LongNorth;
		
		private string _HeightAOD;
		
		private int _LoggerID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _UpdateDate;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Notes;
		
		private System.Nullable<int> _quietdays;
		
		private int _ZoneID;
		
		private EntityRef<zone> _zone;
		
		private EntityRef<loggers> _loggers;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDatagateIDChanging(System.Nullable<int> value);
    partial void OnDatagateIDChanged();
    partial void OnOwnerAccountChanging(System.Nullable<int> value);
    partial void OnOwnerAccountChanged();
    partial void OnSiteIDChanging(string value);
    partial void OnSiteIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnLatEastChanging(string value);
    partial void OnLatEastChanged();
    partial void OnLongNorthChanging(string value);
    partial void OnLongNorthChanged();
    partial void OnHeightAODChanging(string value);
    partial void OnHeightAODChanged();
    partial void OnLoggerIDChanging(int value);
    partial void OnLoggerIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateDateChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnquietdaysChanging(System.Nullable<int> value);
    partial void OnquietdaysChanged();
    partial void OnZoneIDChanging(int value);
    partial void OnZoneIDChanged();
    #endregion
		
		public sites()
		{
			this._zone = default(EntityRef<zone>);
			this._loggers = default(EntityRef<loggers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatagateID", DbType="Int")]
		public System.Nullable<int> DatagateID
		{
			get
			{
				return this._DatagateID;
			}
			set
			{
				if ((this._DatagateID != value))
				{
					this.OnDatagateIDChanging(value);
					this.SendPropertyChanging();
					this._DatagateID = value;
					this.SendPropertyChanged("DatagateID");
					this.OnDatagateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerAccount", DbType="Int")]
		public System.Nullable<int> OwnerAccount
		{
			get
			{
				return this._OwnerAccount;
			}
			set
			{
				if ((this._OwnerAccount != value))
				{
					this.OnOwnerAccountChanging(value);
					this.SendPropertyChanging();
					this._OwnerAccount = value;
					this.SendPropertyChanged("OwnerAccount");
					this.OnOwnerAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SiteID", DbType="VarChar(32)")]
		public string SiteID
		{
			get
			{
				return this._SiteID;
			}
			set
			{
				if ((this._SiteID != value))
				{
					this.OnSiteIDChanging(value);
					this.SendPropertyChanging();
					this._SiteID = value;
					this.SendPropertyChanged("SiteID");
					this.OnSiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(256)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LatEast", DbType="VarChar(20)")]
		public string LatEast
		{
			get
			{
				return this._LatEast;
			}
			set
			{
				if ((this._LatEast != value))
				{
					this.OnLatEastChanging(value);
					this.SendPropertyChanging();
					this._LatEast = value;
					this.SendPropertyChanged("LatEast");
					this.OnLatEastChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongNorth", DbType="VarChar(20)")]
		public string LongNorth
		{
			get
			{
				return this._LongNorth;
			}
			set
			{
				if ((this._LongNorth != value))
				{
					this.OnLongNorthChanging(value);
					this.SendPropertyChanging();
					this._LongNorth = value;
					this.SendPropertyChanged("LongNorth");
					this.OnLongNorthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeightAOD", DbType="VarChar(20)")]
		public string HeightAOD
		{
			get
			{
				return this._HeightAOD;
			}
			set
			{
				if ((this._HeightAOD != value))
				{
					this.OnHeightAODChanging(value);
					this.SendPropertyChanging();
					this._HeightAOD = value;
					this.SendPropertyChanged("HeightAOD");
					this.OnHeightAODChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggerID", DbType="Int NOT NULL")]
		public int LoggerID
		{
			get
			{
				return this._LoggerID;
			}
			set
			{
				if ((this._LoggerID != value))
				{
					if (this._loggers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoggerIDChanging(value);
					this.SendPropertyChanging();
					this._LoggerID = value;
					this.SendPropertyChanged("LoggerID");
					this.OnLoggerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateDate
		{
			get
			{
				return this._UpdateDate;
			}
			set
			{
				if ((this._UpdateDate != value))
				{
					this.OnUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._UpdateDate = value;
					this.SendPropertyChanged("UpdateDate");
					this.OnUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="VarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quietdays", DbType="Int")]
		public System.Nullable<int> quietdays
		{
			get
			{
				return this._quietdays;
			}
			set
			{
				if ((this._quietdays != value))
				{
					this.OnquietdaysChanging(value);
					this.SendPropertyChanging();
					this._quietdays = value;
					this.SendPropertyChanged("quietdays");
					this.OnquietdaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneID", DbType="Int NOT NULL")]
		public int ZoneID
		{
			get
			{
				return this._ZoneID;
			}
			set
			{
				if ((this._ZoneID != value))
				{
					if (this._zone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZoneIDChanging(value);
					this.SendPropertyChanging();
					this._ZoneID = value;
					this.SendPropertyChanged("ZoneID");
					this.OnZoneIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zone_sites", Storage="_zone", ThisKey="ZoneID", OtherKey="ID", IsForeignKey=true)]
		public zone zone
		{
			get
			{
				return this._zone.Entity;
			}
			set
			{
				zone previousValue = this._zone.Entity;
				if (((previousValue != value) 
							|| (this._zone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._zone.Entity = null;
						previousValue.sites.Remove(this);
					}
					this._zone.Entity = value;
					if ((value != null))
					{
						value.sites.Add(this);
						this._ZoneID = value.ID;
					}
					else
					{
						this._ZoneID = default(int);
					}
					this.SendPropertyChanged("zone");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="loggers_sites", Storage="_loggers", ThisKey="LoggerID", OtherKey="ID", IsForeignKey=true)]
		public loggers loggers
		{
			get
			{
				return this._loggers.Entity;
			}
			set
			{
				loggers previousValue = this._loggers.Entity;
				if (((previousValue != value) 
							|| (this._loggers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._loggers.Entity = null;
						previousValue.sites.Remove(this);
					}
					this._loggers.Entity = value;
					if ((value != null))
					{
						value.sites.Add(this);
						this._LoggerID = value.ID;
					}
					else
					{
						this._LoggerID = default(int);
					}
					this.SendPropertyChanged("loggers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.zone")]
	public partial class zone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ZoneName;
		
		private EntitySet<sites> _sites;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnZoneNameChanging(string value);
    partial void OnZoneNameChanged();
    #endregion
		
		public zone()
		{
			this._sites = new EntitySet<sites>(new Action<sites>(this.attach_sites), new Action<sites>(this.detach_sites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneName", DbType="VarChar(100)")]
		public string ZoneName
		{
			get
			{
				return this._ZoneName;
			}
			set
			{
				if ((this._ZoneName != value))
				{
					this.OnZoneNameChanging(value);
					this.SendPropertyChanging();
					this._ZoneName = value;
					this.SendPropertyChanged("ZoneName");
					this.OnZoneNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="zone_sites", Storage="_sites", ThisKey="ID", OtherKey="ZoneID")]
		public EntitySet<sites> sites
		{
			get
			{
				return this._sites;
			}
			set
			{
				this._sites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sites(sites entity)
		{
			this.SendPropertyChanging();
			entity.zone = this;
		}
		
		private void detach_sites(sites entity)
		{
			this.SendPropertyChanging();
			entity.zone = null;
		}
	}
}
#pragma warning restore 1591
