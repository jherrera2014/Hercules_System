@model IEnumerable<dynamic>

@{
    ViewBag.Title = "List";
}

<link href="@Url.Content("~/Content/Dashboard/List.css")" rel="stylesheet" type="text/css" />

<h2>Dashboard</h2>
<div>
    <div class="demo-section k-header">
            <h4>Filter</h4>
            <p>
                 @(Html.Kendo().DropDownList()
                    .Name("ZoneDropDownList") //The name of the dropdownlist is mandatory. It specifies the "id" attribute of the widget.
                    .DataTextField("ZoneName") //Specifies which property of the Product to be used by the dropdownlist as a text.
                    .DataValueField("ID") //Specifies which property of the Product to be used by the dropdownlist as a value.
                    .HtmlAttributes(new { style = "width:300px" })
                    .OptionLabel("Zone")
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetZone", "Helper"); //Set the Action and Controller name
                        }) ; //If true the DataSource will not filter the data on the client.
                    })
                    .Events(e =>
                    {
                        e.Change("onChangeZone");
                    })
                    
                 )
            </p>
            <p>
                @(Html.Kendo().DropDownList()
                        .Name("LoggerDropDownList") //The name of the dropdownlist is mandatory. It specifies the "id" attribute of the widget.
                        .DataTextField("LoggerName") //Specifies which property of the Product to be used by the dropdownlist as a text.
                        .DataValueField("LoggerID") //Specifies which property of the Product to be used by the dropdownlist as a value.
                        .HtmlAttributes(new { style = "width:300px" })
                        .OptionLabel("Logger")
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetLogger", "Helper")//Set the Action and Controller name
                               .Data("filterLogger");
                            })
                            .ServerFiltering(true); //If true the DataSource will not filter the data on the client.
                        })
                        .Enable(false)
                        .AutoBind(false)
                        .CascadeFrom("ZoneDropDownList")
                                        .Events(e =>
                                        {
                                            e.Change("onChange");
                                        })
                        
                )

               
            </p>


        @*<input type="button" class="k-button k-primary" value="Filter" onclick="location.href='@Url.Action("FilterButton", "Dashboard")'" />*@

    </div>

    <div id="grid" class="grid">

    @(Html.Kendo().Grid(Model).Name("Dashboars")
          .DataSource(ds => ds.Ajax()
                .Model(c =>
                {
                    c.Id("IDLogger");
                    c.Field("IDAlarm", typeof(int));
                    c.Field("SitesName", typeof(string)); 
                    c.Field("ZoneName", typeof(string));
                    c.Field("ZoneID", typeof(int)); 
                    c.Field("LoggerSMS", typeof(string));
                    c.Field("SerialNumber", typeof(string));
                    c.Field("LoggerType", typeof(string));
                    c.Field("AlarmType", typeof(string));
                    c.Field("DateAlarm", typeof(DateTime));
                    c.Field("AlarmPoint", typeof(string));
                    c.Field("LoggerNow", typeof(string));
                })
                .Read(r => r.Action("Read", "Dashboard"))
                .Create(u => u.Action("Create", "Home"))
               

                )
                .Columns(columns =>
                {
                    columns.Bound("IDAlarm").Title("ID Alarm").Visible(false);
                    columns.Bound("SitesName").Title("Sites").Width("");
                    columns.Bound("ZoneName").Title("Zone").Width("");
                    columns.Bound("LoggerSMS").Title("Logger SMS").Width("");
                    columns.Bound("SerialNumber").Title("Serial Number").Width("");
                    columns.Bound("LoggerType").Title("Logger Type").Width("");
                    columns.Bound("AlarmType").Title("Alarm Type").Width("");
                    columns.Bound("DateAlarm").Title("Date Alarm").Width("");
                    columns.Bound("AlarmPoint").Template(t => { }).Title("Row No").ClientTemplate("<span id='temp-range'  style='line-height: 60px ;'></span>").HtmlAttributes("<span id='temp-range' style='line-height: 60px'></span>");
                    columns.Bound("LoggerNow").Title("Logger Now").Width("");
                    
                    
                    columns.Command(command =>
                    {
                        command.Custom("View").Click("ViewDetail");
                    });
                } )
                .Editable(editable => editable.TemplateName("ProductItem").Mode(GridEditMode.PopUp))
                .Sortable(sortable => sortable.AllowUnsort(false))
                .Filterable()
                .Pageable()             
        )
    
          
  

    </div>

    <script type="text/javascript">
        var detailsTemplate = kendo.template($("#template").html());

        $(document).ready(function () {
            var zones = $("#ZoneDropDownList").data("kendoDropDownList"),
                logger = $("#LoggerDropDownList").data("kendoDropDownList");
        });

        function onChange() {
            applyFilter("IDLogger", $("#LoggerDropDownList").val());
        }
        function onChangeZone() {
            applyFilter("ZoneID", $("#ZoneDropDownList").val());
        }

    
        function filterLogger() {
            return {
                ZoneDropDownList: $("#ZoneDropDownList").val()
            };
        }

       

        function ViewDetail(e) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var stockReceiptId = dataItem.IDAlarm;
            window.location.href = "@Url.Action("Detail", "Dashboard")?ID=" + stockReceiptId;

        }

       
      

        function applyFilter(filterField, filterValue) {

            // get the kendoGrid element.
            var gridData = $("#Dashboars").data("kendoGrid");

            // get currently applied filters from the Grid.
            var currFilterObj = gridData.dataSource.filter();

            var currentFilters = currFilterObj ? currFilterObj.filters : [];

            // iterate over current filters array. if a filter for "filterField" is already
            // defined, remove it from the array
            // once an entry is removed, we stop looking at the rest of the array.
            if (currentFilters && currentFilters.length > 0) {
                for (var i = 0; i < currentFilters.length; i++) {
                    if (currentFilters[i].field == filterField) {
                        currentFilters.splice(i, 1);
                        break;
                    }
                }
            }

            // if "filterValue" is "0", meaning "-- select --" option is selected, we don't 
            // do any further processing. That will be equivalent of removing the filter.
            // if a filterValue is selected, we add a new object to the currentFilters array.
            if (filterValue != "") {
                currentFilters.push({
                    field: filterField,
                    operator: "eq",
                    value: filterValue
                });
            }

            // finally, the currentFilters array is applied back to the Grid, using "and" logic.
            gridData.dataSource.filter({
                logic: "and",
                filters: currentFilters
            });

        }



       






    </script>

    <script>
        $("#sparkline1").sparkline([10, 12, 12, 9, 7], {
            type: 'bullet'
        });


    </script>


</div>
<div id="sparkline1"></div>

