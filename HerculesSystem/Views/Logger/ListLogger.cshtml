@model IEnumerable<dynamic>

@{
    ViewBag.Title = "List Logger";
}

<link href="@Url.Content("~/Content/Logger/List.css")" rel="stylesheet" type="text/css" />
<h2>List Logger</h2>

<div class="demo-section k-header">
    <h4>Filter</h4>
    <p>
        @(Html.Kendo().DropDownList()
                    .Name("ZoneDropDownList") //The name of the dropdownlist is mandatory. It specifies the "id" attribute of the widget.
                    .DataTextField("ZoneName") //Specifies which property of the Product to be used by the dropdownlist as a text.
                    .DataValueField("ID") //Specifies which property of the Product to be used by the dropdownlist as a value.
                    .HtmlAttributes(new { style = "width:170px" })
                    .OptionLabel("Zone")
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetZone", "Helper"); //Set the Action and Controller name
                        }); //If true the DataSource will not filter the data on the client.
                    })
                    .Events(e =>
                    {
                        e.Change("onChangeZone");
                    })

        )
    </p>
   
    <p>
        @(Html.Kendo().DropDownList()
                    .Name("LoggerDropDownList") //The name of the dropdownlist is mandatory. It specifies the "id" attribute of the widget.
                    .DataTextField("LoggerName") //Specifies which property of the Product to be used by the dropdownlist as a text.
                    .DataValueField("LoggerID") //Specifies which property of the Product to be used by the dropdownlist as a value.
                    .HtmlAttributes(new { style = "width:170px" })
                    .OptionLabel("Logger")
                    .DataSource(source =>
                    {
                        source.Read(read =>
                        {
                            read.Action("GetLogger", "Helper")//Set the Action and Controller name
                           .Data("filterLogger");
                        })
                        .ServerFiltering(true); //If true the DataSource will not filter the data on the client.
                    })
                    .Enable(false)
                    .AutoBind(false)
                    .CascadeFrom("ZoneDropDownList")
                    .Events(e =>
                    {
                        e.Change("onChange");
                    })
        )
    </p>

    @(Html.Kendo().Button()
        .Name("linkButton")
        .Tag("a")
        
        .Content("Create")
        .Events(e =>
        {
            e.Click("ClickCreate");
        })
    )

   
   
  
</div>



<div id="grid" class="grid">  

    @(Html.Kendo().Grid(Model).Name("GridLoggers")
      .DataSource(ds => ds.Ajax()
            .Model(c =>
            {
                c.Id("ID");
                c.Field("LoggerSMSNumber",typeof(int));
                c.Field("BatteryLevel", typeof(int));
                c.Field("CreationDate", typeof(DateTime));
                c.Field("LoggerSerialNumber", typeof(int));
                c.Field("LoggerType", typeof(string));
                c.Field("SignalLevel", typeof(int));
                c.Field("Adress", typeof(string));
                c.Field("ZoneID", typeof(int));
                c.Field("ZoneName", typeof(string));

                c.Field("Owner", typeof(string));
                //c.Field(command => command.Custom("View").Click("ViewDetail")).Title("Detail").Width("100px");
            })
            .Read(r => r.Action("Read", "Logger"))
            .Create(u => u.Action("Create", "Home"))
            .Destroy(u => u.Action("Delete", "Logger"))
            
            )
            
            .Columns(columns =>
                {
                    columns.Bound("LoggerSMSNumber").Title("SMS");
                    columns.Bound("LoggerSerialNumber").Title("Serial Number");
                    columns.Bound("Owner").Title("Owner");
                    columns.Bound("Adress").Title("Adress");
                   // columns.Bound("BatteryLevel").Title("Battery Level");
                    columns.Bound("CreationDate").Title("Creation Date").Format("{0:dd/MM/yyyy HH:mm:ss}");
                   // columns.Bound("LoggerType").Title("Type");
                    //columns.Bound("SignalLevel").Title("Signal Level");
                    columns.Bound("ZoneName").Title("Signal Name");
                    
                    columns.Command(command =>
                    {
                        command.Custom("View").Click("ViewDetail");
                        command.Destroy().Text("Delete");
                    });
                    
                })
                        .Editable(editable => editable.TemplateName("ProductItem").Mode(GridEditMode.PopUp))
                        
                        .Sortable()
                        .Filterable()
                        .Pageable()
                        
      )
           

</div>

<script type="text/javascript">

    var detailsTemplate = kendo.template($("#template").html());

    function ViewDetail(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var stockReceiptId = dataItem.ID;
        window.location.href = "@Url.Action("DetailButton", "Logger")?ID=" + stockReceiptId;
     
    }

    function FilterGrid() {
        var Zone = $("#ZoneDropDownList").val();
      
        var Logger = $("#LoggerDropDownList").val();
         window.location.href = "@Url.Action("FilterButton", "Logger")?zone=" + Zone +"&logger="+Logger;
    }

    
        function filterLogger() {
            return {
                ZoneDropDownList: $("#ZoneDropDownList").val()
            };
        }

        $(document).ready(function () {
            var zones = $("#ZoneDropDownList").data("kendoDropDownList"),
                
                logger = $("#LoggerDropDownList").data("kendoDropDownList");
        });

        function onChangeZone() {
            applyFilter("ZoneID", $("#ZoneDropDownList").val());
        }

        function onChange() {
            applyFilter("LoggerID", $("#LoggerDropDownList").val());
        }
        function applyFilter(filterField, filterValue) {

            // get the kendoGrid element.
            var gridData = $("#GridLoggers").data("kendoGrid");

            // get currently applied filters from the Grid.
            var currFilterObj = gridData.dataSource.filter();

            var currentFilters = currFilterObj ? currFilterObj.filters : [];

         
            if (currentFilters && currentFilters.length > 0) {
                for (var i = 0; i < currentFilters.length; i++) {
                    if (currentFilters[i].field == filterField) {
                        currentFilters.splice(i, 1);
                        break;
                    }
                }
            }

            if (filterValue != "") {
                currentFilters.push({
                    field: filterField,
                    operator: "eq",
                    value: filterValue
                });
            }

            // finally, the currentFilters array is applied back to the Grid, using "and" logic.
            gridData.dataSource.filter({
                logic: "and",
                filters: currentFilters
            });

        }

        function ClickCreate(e) {
          
            window.location.href = "@Url.Action("Create", "Logger")";   
        }

      
</script>







